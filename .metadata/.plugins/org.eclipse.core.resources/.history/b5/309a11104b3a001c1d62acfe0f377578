package com.statebank.xoriant.resource;

import java.util.List;

import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.statebank.xoriant.model.AccountDetails;
import com.statebank.xoriant.model.TransactionDetails;

@RestController
@RequestMapping("/api/manager")
@CrossOrigin
@RefreshScope
public class ManagerResource {

	@Autowired(required = false)
	ManagerService managerService;
	
	@PostMapping
	public Branch addNewBranch(@RequestBody Branch branch) {
		
		return managerService.addNewBranch(branch);
	}

	public PersonInfo addNewPerson(PersonInfo personInfo) {
		
		return managerService.addNewPerson(personInfo);
	}

	public int updateCustomer(int accountNumber, PersonInfo personInfo)
	{
		return managerService.updateCustomer(accountNumber, personInfo);
	}

	public String getPersonId(int customer_id) {
		
		return managerService.getPersonId(customer_id);
	}

	public Boolean checkCustomer_id(int customer_id) {
		
		return managerService.checkCustomer_id(customer_id);
	}

	public void deleteCustomer(int customer_id) {
		
		managerService.deleteCustomer(customer_id);
	}

	public void addAccount(String roleType, int accountId, int balance, int customerId, int managerId, int accountTypeId,
			int branchId) {
		managerService.addAccount(roleType, accountId, balance, customerId, managerId, accountTypeId, branchId);
		
	}
	
	
	@GetMapping("/findAccountDetails") // manager method
	public List<AccountDetails> findAccountDetails(){
		return customerService.findAccountDetails();
	}
	
	@GetMapping("/withdraw")
	public String withdrawMoney(@RequestBody CustomerDTO customerDTO) {
		String balance = customerService.withdrawMoney(customerDTO.getAccountNumber(),customerDTO.getAmount(),customerDTO.getDescription(),
				customerDTO.getUserType(),customerDTO.getTransactionType(),customerDTO.getAccountType());
		
		return balance;
	}
	@GetMapping("/deposite")
	public String DepositMoney(@RequestBody CustomerDTO customerDTO) {
		String balance = customerService.DepositMoney(customerDTO.getAccountNumber(),customerDTO.getAmount(),customerDTO.getDescription(),
				customerDTO.getUserType(),customerDTO.getTransactionType(),customerDTO.getAccountType());
		return balance;
		
		
	}
	@GetMapping("/miniStatement/{accountNumber}")
	public List<TransactionDetails> MiniStatement(@PathVariable int accountNumber){
		
		List<TransactionDetails> list =customerService.MiniStatement(accountNumber);
		
		return list;
		
	}
	@GetMapping("/customizedStatement")
	public List<TransactionDetails> CustomizedMiniStatement(@RequestBody CustomerDTO customerDTO){
		
		List<TransactionDetails> list = customerService.CustomizedMiniStatement(customerDTO.getAccountNumber(),customerDTO.getAmount(),customerDTO.getFormDate(),
				customerDTO.getToDate());
		
		return list;
	}
	@GetMapping("/fundTransfer")
	public String fundTransfer(@RequestBody CustomerDTO customerDTO) {
		
		String balance = customerService.fundTransfer(customerDTO.getAccountNumber(),customerDTO.getAmount(),customerDTO.getDescription(),
				customerDTO.getUserType(),customerDTO.getTransactionType(),customerDTO.getAccountType());
		return balance;
		
	}
	
	
	  @GetMapping("/checkBalance/{accountNumber}")
	  public String checkBalance(@PathVariable int accountNumber) {
	  
	  String balance = customerService.checkBalance(accountNumber);
	  
	  return balance; }
	
}
